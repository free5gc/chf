/*
 * Nchf_ConvergedCharging
 *
 * ConvergedCharging Service    Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 3.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package convergedcharging

import (
	"net/http"
	"strings"

	chf_context "github.com/free5gc/chf/internal/context"
	"github.com/free5gc/openapi/models"

	"github.com/free5gc/chf/pkg/factory"
	"github.com/gin-gonic/gin"

	"github.com/free5gc/chf/internal/logger"
	"github.com/free5gc/chf/internal/recharge"
	"github.com/free5gc/chf/internal/util"
	logger_util "github.com/free5gc/util/logger"
)

const serviceName string = string(models.ServiceName_NCHF_CONVERGEDCHARGING)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := logger_util.NewGinWithLogrus(logger.GinLog)
	AddService(router)
	return router
}

func AddService(engine *gin.Engine) *gin.RouterGroup {
	group := engine.Group(factory.ConvergedChargingResUriPrefix)

	routerAuthorizationCheck := util.NewRouterAuthorizationCheck(serviceName)
	group.Use(func(c *gin.Context) {
		routerAuthorizationCheck.Check(c, chf_context.GetSelf())
	})

	for _, route := range routes {
		switch route.Method {
		case "GET":
			group.GET(route.Pattern, route.HandlerFunc)
		case "POST":
			group.POST(route.Pattern, route.HandlerFunc)
		case "PUT":
			group.PUT(route.Pattern, route.HandlerFunc)
		case "DELETE":
			group.DELETE(route.Pattern, route.HandlerFunc)
		case "PATCH":
			group.PATCH(route.Pattern, route.HandlerFunc)
		}
	}
	return group
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"/",
		Index,
	},

	{
		"ChargingdataChargingDataRefReleasePost",
		strings.ToUpper("Post"),
		"/chargingdata/:ChargingDataRef/release",
		ChargingdataChargingDataRefReleasePost,
	},

	{
		"ChargingdataChargingDataRefUpdatePost",
		strings.ToUpper("Post"),
		"/chargingdata/:ChargingDataRef/update",
		ChargingdataChargingDataRefUpdatePost,
	},

	{
		"ChargingdataPost",
		strings.ToUpper("Post"),
		"/chargingdata",
		ChargingdataPost,
	},

	{
		"RechargingGet",
		"GET",
		"/recharging",
		recharge.RechargeGet,
	},

	{
		"RechargingQuotaUpdatePut",
		"PUT",
		"/recharging/:rechargingInfo",
		recharge.RechargePut,
	},
}
